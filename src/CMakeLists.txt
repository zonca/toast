
cmake_policy(PUSH)
if(NOT CMAKE_VERSION VERSION_LESS 3.0)
    cmake_policy(SET CMP0043 NEW)
endif()

include(MacroLibraryTargets)

include_directories(${PROJECT_SOURCE_DIR}/src/libtoast)
include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/capi)
include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/fod)
include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/atm)
include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/test)
include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/test/gtest)
include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/test/gtest/gtest)
include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/map)
include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/tod)
include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/math)
include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/math/Random123)
include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/math/Random123/conventional)
include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/math/Random123/features)

if(NOT USE_MPI)
    include_directories(${PROJECT_SOURCE_DIR}/src/libtoast/fakempi)
endif(NOT USE_MPI)

add_subdirectory(libtoast)

#------------------------------------------------------------------------------#
#
set(PROJECT_LIBRARIES ${EXTERNAL_LIBRARIES})

# =============================================================================#
#   Library build
# =============================================================================#
set(PROJECT_LINK_TARGET )

# =============================================================================#

if(BUILD_STATIC_LIBS)

    #--------------------------------------------------------------------------#
    # static toast library
    #--------------------------------------------------------------------------#
    add_library(${PROJECT_NAME}-static STATIC $<TARGET_OBJECTS:libtoast-object>)
    set_target_properties(${PROJECT_NAME}-static
        PROPERTIES OUTPUT_NAME      "toast"
                   VERSION          "${${PROJECT_NAME}_SHORT_VERSION}"
                   LINK_FLAGS       "${EXTERNAL_CXX_LINK_FLAGS}"
                   LINKER_LANGUAGE  CXX)
    target_link_libraries(${PROJECT_NAME}-static ${EXTERNAL_LIBRARIES})
    set(PROJECT_LINK_TARGETS ${PROJECT_NAME}-static)
    #--------------------------------------------------------------------------#

endif()

# =============================================================================#

if(BUILD_SHARED_LIBS)

    #--------------------------------------------------------------------------#
    # shared toast library
    #--------------------------------------------------------------------------#
    add_library(${PROJECT_NAME}-shared SHARED $<TARGET_OBJECTS:libtoast-object>)
    set_target_properties(${PROJECT_NAME}-shared
        PROPERTIES OUTPUT_NAME      "toast"
                   VERSION          "${${PROJECT_NAME}_SHORT_VERSION}"
                   SOVERSION        "${${PROJECT_NAME}_MAJOR_VERSION}"
                   LINK_FLAGS       "${EXTERNAL_CXX_LINK_FLAGS}"
                   RPATH            ${CMAKE_INSTALL_FULL_PYTHONDIR})
    target_link_libraries(${PROJECT_NAME}-shared ${EXTERNAL_LIBRARIES})
    list(APPEND PROJECT_LIBRARIES ${PROJECT_NAME}-shared)
    set(PROJECT_LINK_TARGETS ${PROJECT_NAME}-shared)
    #--------------------------------------------------------------------------#

endif()


# =============================================================================#
#   Python build
# =============================================================================#
if(USE_PYTHON)
    add_subdirectory(python)
endif()


# =============================================================================#
#   Executable build
# =============================================================================#
add_executable(toast_test libtoast/toast_test.cpp)
target_link_libraries(toast_test
    ${PROJECT_LINK_TARGETS} ${EXTERNAL_LIBRARIES})

# =============================================================================#
#   Export
get_directory_property(compile_defs COMPILE_DEFINITIONS)

include(GenerateConfigHeader)

set(CMAKE_EXPORT_COMPILE_COMMANDS OFF)
set(PROJECT_SHARED_LIBRARY ${PROJECT_NAME}-shared)
set(PROJECT_STATIC_LIBRARY ${PROJECT_NAME}-static)
set(PACKAGE_VERSION "${${PROJECT_NAME}_VERSION}")
set(config_target ${PROJECT_NAME}LibraryDepends)

set(_TARGETS )
set(PROJECT_LIBRARY_NAMES )

if(BUILD_SHARED_LIBS)
    list(APPEND _TARGETS ${PROJECT_NAME}-shared)
endif()
if(BUILD_STATIC_LIBS )
    list(APPEND _TARGETS ${PROJECT_NAME}-static)
endif()

list(GET _TARGETS 0 PROJECT_LIBRARY_NAMES)

# =============================================================================#
# BUILD TREE
# =============================================================================#
# Add all targets to the build-tree export set
export(TARGETS ${_TARGETS} FILE "${PROJECT_BINARY_DIR}/${PROJECT_NAME}LibraryDepends.cmake")
# Export the package for use from the build-tree
# (this registers the build-tree with a global CMake-registry)
export(PACKAGE ${PROJECT_NAME}LibraryDepends)
# Create the Config.cmake and ConfigHeader-${CMAKE_BUILD_TYPE}.cmake for the build tree
configure_file(${PROJECT_SOURCE_DIR}/cmake/Templates/ProjectExportConfig.cmake.in
    "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
    @ONLY)
configure_file(${PROJECT_SOURCE_DIR}/cmake/Templates/ProjectExportConfigHeader.cmake.in
    "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigHeader-${CMAKE_BUILD_TYPE}.cmake"
    @ONLY)

# =============================================================================#
# INSTALL TREE
# =============================================================================#
# Create the Config.cmake and ConfigHeader-${CMAKE_BUILD_TYPE}.cmake for the install tree
configure_file(${PROJECT_SOURCE_DIR}/cmake/Templates/ProjectExportConfig.cmake.in
    "${PROJECT_BINARY_DIR}/InstallTreeFiles/${PROJECT_NAME}Config.cmake"
    @ONLY)
configure_file(${PROJECT_SOURCE_DIR}/cmake/Templates/ProjectExportConfigHeader.cmake.in
    "${PROJECT_BINARY_DIR}/InstallTreeFiles/${PROJECT_NAME}ConfigHeader-${CMAKE_BUILD_TYPE}.cmake"
    @ONLY)

# Create the ConfigVersion.cmake for both
configure_file(${PROJECT_SOURCE_DIR}/cmake/Templates/ProjectExportConfigVersion.cmake.in
    "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake" @ONLY)

# Install the ${PROJECT_NAME}Config*.cmake files
install(FILES
    "${PROJECT_BINARY_DIR}/InstallTreeFiles/${PROJECT_NAME}Config.cmake"
    "${PROJECT_BINARY_DIR}/InstallTreeFiles/${PROJECT_NAME}ConfigHeader-${CMAKE_BUILD_TYPE}.cmake"
    "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
    DESTINATION ${CMAKE_INSTALL_CMAKEDIR}
    COMPONENT dev)
# install the executables
install(TARGETS toast_test
    DESTINATION ${CMAKE_INSTALL_BINDIR})
# install the libraries
install(TARGETS ${_TARGETS}
    DESTINATION ${CMAKE_INSTALL_LIBDIR}
    EXPORT ${PROJECT_NAME}LibraryDepends)
# Install the export set for use with the install-tree
install(EXPORT ${PROJECT_NAME}LibraryDepends
    DESTINATION ${CMAKE_INSTALL_CMAKEDIR}
    COMPONENT dev)

# export the packages
export(PACKAGE ${PROJECT_NAME})

foreach(_cmake_file Compilers FindMKL FindSSE MacroUtilities FindTBB)
    # Install CMake files
    install(FILES ${PROJECT_SOURCE_DIR}/cmake/Modules/${_cmake_file}.cmake
        DESTINATION ${CMAKE_INSTALL_CMAKEDIR}
        COMPONENT dev)
endforeach()

cmake_policy(POP)
